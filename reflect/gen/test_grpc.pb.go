// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	Create(ctx context.Context, in *OrderApiCreate, opts ...grpc.CallOption) (*Order, error)
	Close(ctx context.Context, in *CloseApiCreate, opts ...grpc.CallOption) (*Order, error)
	ServerStream(ctx context.Context, in *OrderApiCreate, opts ...grpc.CallOption) (OrderService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_ClientStreamClient, error)
	BdStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_BdStreamClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Create(ctx context.Context, in *OrderApiCreate, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.v1.OrderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Close(ctx context.Context, in *CloseApiCreate, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.v1.OrderService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ServerStream(ctx context.Context, in *OrderApiCreate, opts ...grpc.CallOption) (OrderService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], "/order.v1.OrderService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_ServerStreamClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceServerStreamClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[1], "/order.v1.OrderService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceClientStreamClient{stream}
	return x, nil
}

type OrderService_ClientStreamClient interface {
	Send(*OrderApiCreate) error
	CloseAndRecv() (*Order, error)
	grpc.ClientStream
}

type orderServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceClientStreamClient) Send(m *OrderApiCreate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceClientStreamClient) CloseAndRecv() (*Order, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) BdStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_BdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[2], "/order.v1.OrderService/BdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceBdStreamClient{stream}
	return x, nil
}

type OrderService_BdStreamClient interface {
	Send(*OrderApiCreate) error
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderServiceBdStreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceBdStreamClient) Send(m *OrderApiCreate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceBdStreamClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	Create(context.Context, *OrderApiCreate) (*Order, error)
	Close(context.Context, *CloseApiCreate) (*Order, error)
	ServerStream(*OrderApiCreate, OrderService_ServerStreamServer) error
	ClientStream(OrderService_ClientStreamServer) error
	BdStream(OrderService_BdStreamServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Create(context.Context, *OrderApiCreate) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderServiceServer) Close(context.Context, *CloseApiCreate) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedOrderServiceServer) ServerStream(*OrderApiCreate, OrderService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedOrderServiceServer) ClientStream(OrderService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedOrderServiceServer) BdStream(OrderService_BdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BdStream not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderApiCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.OrderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Create(ctx, req.(*OrderApiCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseApiCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.OrderService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Close(ctx, req.(*CloseApiCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderApiCreate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).ServerStream(m, &orderServiceServerStreamServer{stream})
}

type OrderService_ServerStreamServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type orderServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceServerStreamServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).ClientStream(&orderServiceClientStreamServer{stream})
}

type OrderService_ClientStreamServer interface {
	SendAndClose(*Order) error
	Recv() (*OrderApiCreate, error)
	grpc.ServerStream
}

type orderServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceClientStreamServer) SendAndClose(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceClientStreamServer) Recv() (*OrderApiCreate, error) {
	m := new(OrderApiCreate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_BdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).BdStream(&orderServiceBdStreamServer{stream})
}

type OrderService_BdStreamServer interface {
	Send(*Order) error
	Recv() (*OrderApiCreate, error)
	grpc.ServerStream
}

type orderServiceBdStreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceBdStreamServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceBdStreamServer) Recv() (*OrderApiCreate, error) {
	m := new(OrderApiCreate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderService_Create_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _OrderService_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _OrderService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _OrderService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BdStream",
			Handler:       _OrderService_BdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reflect/gen/test.proto",
}

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestList(ctx context.Context, in *ReasonApi, opts ...grpc.CallOption) (*Reasons, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestList(ctx context.Context, in *ReasonApi, opts ...grpc.CallOption) (*Reasons, error) {
	out := new(Reasons)
	err := c.cc.Invoke(ctx, "/order.v1.TestService/TestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	TestList(context.Context, *ReasonApi) (*Reasons, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) TestList(context.Context, *ReasonApi) (*Reasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestList not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReasonApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.TestService/TestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestList(ctx, req.(*ReasonApi))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestList",
			Handler:    _TestService_TestList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reflect/gen/test.proto",
}
